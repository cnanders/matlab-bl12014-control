classdef Hardware < mic.Base
        
    properties (Constant)
       
        dWidthName = 500
        
    end
    
	properties
        
        % {mic.ui.TaskSequence 1x1}
        uiStateConnected
        uiDoseMonitor
        uiALS
        uiHydraWafer
        uiDeltaTauPowerPmac
        % uiCxroHeightSensor
        uiDataTranslationMeasurPoint
        uiMfDriftMonitorMiddleware
        uiMfDriftMonitor
        uiKeithleyWafer
        uiKeithleyReticle
        uiWebSwitchBeamline
        uiWebSwitchEndstation
        uiWebSwitchVis
        
        uiSR570MDM
        uiSR570DCT1
        uiSR570DCT2
        uiAerotechStageDCTWafer
        uiSmarActStageDCTAperture
        
        uiBL1201CorbaProxy
        uiDCTCorbaProxy
        uiRigol
        uiSmarActM141
        uiSmarActVPFM
        uiWagoD141
        uiExitSlit
        
        
        uiGalilD142
        uiGalilVis
        uiGalilM143
        
        uiMightex1
        uiMightex2
        
        uiNPointM142
        uiNPointMA
        
        uiNewFocus8742M142
        uiNewFocus8742MA
        
    end
    
    properties (SetAccess = private)
        
        hParent
        cName = 'ui-hardware-'
        
    end
    
    properties (Access = private)
               
        
        clock
        uiClock
        dDelay = 0.5
        
        % {bl12014.Hardware 1x1}
        hardware
        
        % {bl120114.ui.App 1x1}
        uiApp
        
    end
    
        
    events
        
        eName
        
    end
    

    
    methods
        
        
        function this = Hardware(varargin)
            
            for k = 1 : 2: length(varargin)
                this.msg(sprintf('passed in %s', varargin{k}), this.u8_MSG_TYPE_VARARGIN_PROPERTY);
                if this.hasProp( varargin{k})
                    this.msg(sprintf(' settting %s', varargin{k}), this.u8_MSG_TYPE_VARARGIN_SET);
                    this.(varargin{k}) = varargin{k + 1};
                end
            end
            

            if ~isa(this.clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            if ~isa(this.hardware, 'bl12014.Hardware')
                error('hardware must be bl12014.Hardware');
            end
            
            
            if ~isa(this.uiClock, 'mic.Clock') && ...
               ~isa(this.uiClock, 'mic.ui.Clock')
                error('uiClock must be mic.Clock | mic.ui.Clock');
            end
            
            this.init();
            
        end
        
        
        function build(this, hParent, dLeft, dTop)
                    
            this.hParent = hParent;

            dPad = 10;
            dSep = 30;
            
            dTopStart = dTop;


            this.uiStateConnected.build(this.hParent, dLeft, dTop, 630);
            dTop = dTop + dSep;
            
            
            this.uiDoseMonitor.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiALS.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiHydraWafer.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiDeltaTauPowerPmac.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
                        
            
            this.uiMfDriftMonitor.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiMfDriftMonitorMiddleware.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiDataTranslationMeasurPoint.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiKeithleyReticle.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiKeithleyWafer.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiWebSwitchBeamline.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiWebSwitchEndstation.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiWebSwitchVis.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
           
            this.uiSR570MDM.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            
            this.uiSR570DCT1.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiSR570DCT2.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            
            this.uiAerotechStageDCTWafer.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiSmarActStageDCTAperture.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            dLeft = 680;
            dTop = dTopStart;
            
            this.uiDCTCorbaProxy.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            this.uiBL1201CorbaProxy.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiRigol.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiSmarActM141.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiSmarActVPFM.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiWagoD141.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiExitSlit.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiGalilD142.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiGalilM143.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiGalilVis.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiMightex1.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiMightex2.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiNPointM142.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiNPointMA.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiNewFocus8742M142.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiNewFocus8742MA.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
        end
        
                        
        
        %% Destructor
        
        function cec = getPropsDelete(this)
            
            cec = {...
                ... {mic.ui.TaskSequence 1x1}
                'uiStateConnected', ...
                'uiDoseMonitor', ...
                'uiALS', ...
                'uiDeltaTauPowerPmac', ...
                ... uiCxroHeightSensor', ...
                'uiDataTranslationMeasurPoint', ...
                'uiMfDriftMonitorMiddleware', ...
                'uiMfDriftMonitor', ...
                'uiKeithleyWafer', ...
                'uiKeithleyReticle', ...
                'uiWebSwitchBeamline', ...
                'uiWebSwitchEndstation', ...
                'uiWebSwitchVis', ...
                'uiSR570MDM', ...
                ...
                'uiSR570DCT1', ...
                'uiSR570DCT2', ...
                'uiAerotechStageDCTWafer', ...
                'uiSmarActStageDCTAperture', ...
                ...
                'uiDCTCorbaProxy', ...
                'uiBL1201CorbaProxy', ...
                'uiRigol', ...
                'uiSmarActM141', ...
                'uiSmarActVPFM', ...
                'uiWagoD141', ...
                'uiExitSlit', ...
                'uiGalilD142', ...
                'uiGalilVis', ...
                'uiGalilM143', ...
                'uiMightex1', ...
                'uiMightex2', ...
                'uiNPointM142', ...
                'uiNPointMA', ...
                'uiNewFocus8742M142', ...
                'uiNewFocus8742MA' ...
            };
            
            
        end
        
        function delete(this)
            
            this.msg('delete()', this.u8_MSG_TYPE_CLASS_DELETE);  

            cecProps = this.getPropsDelete();
            for n = 1 : length(cecProps)
                cProp = cecProps{n};
                this.(cProp).delete();
            end
        
            
        end
        
        
        
        function st = save(this)
            st = struct();
            
        end
        
        function load(this, st)
            
        end
               
        
        
        
        
        
    end
    
    methods (Access = private)
        
        function init(this)
            
            this.msg('init()');
            this.initUiALS();
            this.initUiDoseMonitor();
            this.initUiHydraWafer();
            this.initUiDeltaTauPowerPmac();
            this.initUiMfDriftMonitorMiddleware();
            this.initUiMfDriftMonitor();
            this.initUiDataTranslationMeasurPoint();
            this.initUiKeithleyReticle();
            this.initUiKeithleyWafer();
            this.initUiWebSwitchBeamline();
            this.initUiWebSwitchEndstation();
            this.initUiWebSwitchVis();
            
            this.initUiSR570MDM();
            this.initUiSR570DCT1();
            this.initUiSR570DCT2();
            this.initUiAerotechStageDCTWafer();
            this.initUiSmarActStageDCTAperture();
            
            
            this.initUiDCTCorbaProxy();
            this.initUiBL1201CorbaProxy();
            this.initUiRigol();
            this.initUiSmarActM141();
            this.initUiSmarActVPFM();
            this.initUiWagoD141();
            this.initUiExitSlit();
            this.initUiGalilD142();
            this.initUiGalilM143();
            this.initUiGalilVis();
            this.initUiMightex1();
            this.initUiMightex2();
            this.initUiNPointM142();
            this.initUiNPointMA();
            this.initUiNewFocus8742M142();
            this.initUiNewFocus8742MA();
            
            
            % This must be at the end
            this.uiStateConnected = mic.ui.TaskSequence(...
                'cName', [this.cName, 'connected'], ...
                'task', bl12014.Tasks.createStateHardwareConnected(...
                    [this.cName, 'state-hardware-connected'], ...
                    this, ...
                    this.clock ...
                ), ...
                'lShowButton', true, ...
                'clock', this.uiClock ...
            );

        end
        
            
        function initUiALS(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiALS = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedALS(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectALS() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectALS() ...
                    )...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-cxro-als'], ...
                'cLabel', 'ALS Channel Access (Ring Current + Undulator)' ...
            );
        
        end
        
         function initUiDoseMonitor(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiDoseMonitor = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedDoseMonitor(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectDoseMonitor() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectDoseMonitor() ...
                    )...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-dose-monitor'], ...
                'cLabel', 'Dose Monitor (Photocurrent Integrator)' ...
            );
        
        end
        
        
        
        function initUiDeltaTauPowerPmac(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiDeltaTauPowerPmac = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedDeltaTauPowerPmac(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectDeltaTauPowerPmac(), ...
                        @() this.uiApp.uiWafer.syncDestinations(), ...
                        @() this.uiApp.uiReticle.syncDestinations() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectDeltaTauPowerPmac(), ...
                        @() this.uiApp.uiWafer.syncDestinations(), ...
                        @() this.uiApp.uiReticle.syncDestinations() ...
                    )...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-delta-tau-power-pmac'], ...
                'cLabel', 'DeltaTau Power PMAC (Reticle + Wafer Stages)' ...
            );
        
        end
        
        
        function initUiHydraWafer(this)
            
           ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
           this.uiHydraWafer = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'cName', [this.cName, 'comm-hydra-wafer'], ...
                'fhGet', @() this.hardware.getIsConnectedHydraWafer(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @(lVal) mic.Utils.evalAll(...
                        @() this.hardware.connectHydraWafer() ...
                    ), ...
                    @(lVal) mic.Utils.evalAll(...
                        @() this.hardware.disconnectHydraWafer() ...
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Hydra Wafer'...
           ); 
                
               
            
        end
        
        
        function initUiMfDriftMonitorMiddleware(this)
            
           ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
           this.uiMfDriftMonitorMiddleware = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'cName', [this.cName, 'comm-mf-drift-monitor-middleware'], ...
                'fhGet', @() this.hardware.getIsConnectedMfDriftMonitorMiddleware(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @(lVal) mic.Utils.evalAll(...
                        @() this.hardware.connectMfDriftMonitorMiddleware(), ...
                        @() this.uiApp.uiWafer.syncDestinations() ...
                    ), ...
                    @(lVal) mic.Utils.evalAll(...
                        @() this.hardware.disconnectMfDriftMonitorMiddleware(), ...
                        @() this.uiApp.uiWafer.syncDestinations() ...
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'MF DriftMon Middleware (Height sensor z, tiltX, tiltY)'...
           ); 
                
               
            
        end
        
        function initUiMfDriftMonitor(this)
            
           ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
           this.uiMfDriftMonitor = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'cName', [this.cName, 'comm-mf-drift-monitor'], ...
                'fhGet', @() this.hardware.getIsConnectedMfDriftMonitor(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @(lVal) mic.Utils.evalAll(...
                        @() this.hardware.connectMfDriftMonitor() ...
                    ), ...
                    @(lVal) mic.Utils.evalAll(...
                        @() this.hardware.disconnectMfDriftMonitor() ...
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'MF Drift Monitor (DMI Vibration Analysis)'...
           ); 
                
               
            
        end
        
         function initUiDataTranslationMeasurPoint(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiDataTranslationMeasurPoint = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedDataTranslation(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectDataTranslation(), ...
                    @() this.hardware.disconnectDataTranslatino() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'data-translation-measur-point'], ...
                'cLabel', 'DataTrans MeasurPoint (RTDs, TCs, Beamline Diodes, DMI Power Levels)' ...
            );
        
         end
        
         function initUiKeithleyReticle(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiKeithleyReticle = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-keithley-6482-reticle'], ...
                'fhGet', @() this.hardware.getIsConnectedKeithley6482Reticle(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectKeithley6482Reticle(), ...
                    @() this.hardware.disconnectKeithley6482Reticle() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Keithley 6482 (Reticle Diode, SFPFM Diode)' ...
            );
        
         end
        
         
         function initUiKeithleyWafer(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiKeithleyWafer = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-keithley-6482-wafer'], ...
                'fhGet', @() this.hardware.getIsConnectedKeithley6482Wafer(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectKeithley6482Wafer(), ...
                    @() this.hardware.disconnectKeithley6482Wafer() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Keithley 6482 (Wafer Diode, Focus Montior Diode)' ...
            );
        
         end
        
         function initUiWebSwitchVis(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiWebSwitchVis = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedWebSwitchVis(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectWebSwitchVis(), ...
                    @() this.hardware.disconnectWebSwitchVis() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-webswitch-vis'], ...
                'cLabel', 'WebSwitch (Controls VIS Power)' ...
            );
        
         end
        
         function initUiWebSwitchEndstation(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiWebSwitchEndstation = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedWebSwitchEndstation(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectWebSwitchEndstation(), ...
                    @() this.hardware.disconnectWebSwitchEndstation() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-webswitch-endstation'], ...
                'cLabel', 'WebSwitch (Controls ES Camera Power + ES LED power)' ...
            );
        
         end
        
         function initUiWebSwitchBeamline(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiWebSwitchBeamline = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedWebSwitchBeamline(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectWebSwitchBeamline(), ...
                    @() this.hardware.disconnectWebSwitchBeamline() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-webswitch-beamline'], ...
                'cLabel', 'WebSwitch (Controls BL LED Power + M141 SmarAct MCS Power)' ...
            );
        
         end
         
         function initUiSR570MDM(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiSR570MDM = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedSR570MDM(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectSR570MDM(), ...
                    @() this.hardware.disconnectSR570MDM() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-sr570-mdm'], ...
                'cLabel', 'SR570 MDM' ...
            );
         end
         
         
         function initUiSR570DCT1(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiSR570DCT1 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedSR570DCT1(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectSR570DCT1(), ...
                    @() this.hardware.disconnectSR570DCT1() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-sr570-dct1'], ...
                'cLabel', 'SR570 DCT (1)' ...
            );
         end
         
         function initUiSR570DCT2(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiSR570DCT2 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedSR570DCT2(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectSR570DCT2(), ...
                    @() this.hardware.disconnectSR570DCT2() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-sr570-dct2'], ...
                'cLabel', 'SR570 DCT (2)' ...
            );
         end
         
         function initUiAerotechStageDCTWafer(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiAerotechStageDCTWafer = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedDCTWaferStage(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectDCTWaferStage(), ...
                    @() this.hardware.disconnectDCTWaferSTage() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-aerotech-stage-dct-wafer'], ...
                'cLabel', 'Aerotech Stage DCT Wafer' ...
            );
         end
         
         
         function initUiSmarActStageDCTAperture(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiSmarActStageDCTAperture = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedDCTApertureStage(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectDCTApertureStage(), ...
                    @() this.hardware.disconnectDCTApertureSTage() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-smar-act-stage-dct-aperture'], ...
                'cLabel', 'SmarAct Stage DCT Aperture' ...
            );
         end
        
         
         function initUiBL1201CorbaProxy(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiBL1201CorbaProxy = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                 'fhGet', @() this.hardware.getIsConnectedBL1201CorbaProxy(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectBL1201CorbaProxy(), ...
                    @() this.hardware.disconnectBL1201CorbaProxy() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'bl1201-corba-proxy'], ...
                'cLabel', 'BL1201 Corba Proxy (Angle of Mono Grating, Gap of Undulator)' ...
            );
        
         end
         
         
         function initUiDCTCorbaProxy(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiDCTCorbaProxy = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                 'fhGet', @() this.hardware.getIsConnectedDCTCorbaProxy(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectDCTCorbaProxy(), ...
                    @() this.hardware.disconnectDCTCorbaProxy() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'dct-corba-proxy'], ...
                'cLabel', 'DCT Corba Proxy (ALS ring current 2020.12)' ...
            );
        
         end
        
         function initUiRigol(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiRigol = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-rigol'], ...
                'fhGet', @() this.hardware.getIsConnectedRigolDG1000Z(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectRigolDG1000Z(), ...
                    @() this.hardware.disconnectRigolDG1000Z() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Rigol DG1000Z (Shutter)' ...
            );
        
         end
        
         function initUiSmarActM141(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiSmarActM141 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-smaract-m141'], ...
                'fhGet', @() this.hardware.getIsConnectedSmarActM141(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectSmarActM141(), ...
                    @() this.hardware.disconnectSmarActM141() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'SmarAct (M141 x, tiltX, tiltY)(Needs WebSwitch Power!)' ...
            );
        
         end
         
         function initUiSmarActVPFM(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiSmarActVPFM = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-smaract-vpfm'], ...
                'fhGet', @() this.hardware.getIsConnectedSmarActVPFM(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectSmarActVPFM(), ...
                    @() this.hardware.disconnectSmarActVPFM() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'SmarAct VPFM' ...
            );
        
         end
        
         function initUiWagoD141(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiWagoD141 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-wago-d141'], ...
                'fhGet', @() this.hardware.getIsConnectedWagoD141(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectWagoD141(), ...
                    @() this.hardware.disconnectWagoD141() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Wago (D141 Insert/Remove)' ...
            );
        
         end
        
         function initUiExitSlit(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiExitSlit = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-exit-slit'], ...
                'fhGet', @() this.hardware.getIsConnectedExitSlit(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectExitSlit(), ...
                        @() this.uiApp.uiBeamline.uiExitSlit.syncDestinations(), ...
                        @() this.uiApp.uiTuneFluxDensity.uiExitSlit.syncDestinations() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectExitSlit(), ...
                        @() this.uiApp.uiBeamline.uiExitSlit.syncDestinations(), ...
                        @() this.uiApp.uiTuneFluxDensity.uiExitSlit.syncDestinations() ...
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Exit Slit' ...
            );
        
         end
        
         function initUiGalilD142(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiGalilD142 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-galil-d142'], ...
                'fhGet', @() this.hardware.getIsConnectedGalilD142(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectGalilD142(), ...
                    @() this.hardware.disconnectGalilD142() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Galil (D142 Vertical Stage)' ...
            );
        
         end
        
         
         function initUiGalilM143(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiGalilM143  = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-galil-m143'], ...
                'fhGet', @() this.hardware.getIsConnectedGalilM143(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectGalilM143(), ...
                    @() this.hardware.disconnectGalilM143() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Galil (M143 Vertical Stage)' ...
            );
        
         end
        
         
         function initUiGalilVis(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiGalilVis = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-galil-vis'], ...
                'fhGet', @() this.hardware.getIsConnectedGalilVis(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectGalilVis(), ...
                    @() this.hardware.disconnectGalilVis() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Galil (VIS Spring Motors) (Needs WebSwitch Power!)' ...
            );
        
         end
        
         function initUiMightex1(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiMightex1 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedMightex1(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectMightex1(), ...
                        @() this.uiApp.uiHeightSensorLEDs.syncDestinations() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectMightex1(), ...
                        @() this.uiApp.uiHeightSensorLEDs.syncDestinations() ...
                    )...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-mightex-universal-led-controller-1'], ...
                'cLabel', 'Mightex Universal LED Controller 1 (Height Sensor LEDs)' ...
            );
        
         end
        
         function initUiMightex2(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiMightex2 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedMightex2(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectMightex2(), ...
                        @() this.uiApp.uiHeightSensorLEDs.syncDestinations() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectMightex2(), ...
                        @() this.uiApp.uiHeightSensorLEDs.syncDestinations() ...
                    )...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-mightex-universal-led-controller-2'], ...
                'cLabel', 'Mightex Universal LED Controller 2 (Height Sensor LEDs)' ...
            );
        
         end
        
         
         function initUiNPointM142(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiNPointM142 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                 'fhGet', @() this.hardware.getIsConnectedNPointM142(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectNPointM142(), ...
                        @() this.uiApp.uiScannerM142.uiNPointLC400.updateCacheOfWavetable() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectNPointM142(), ...
                        @() this.uiApp.uiScannerM142.uiNPointLC400.updateCacheOfWavetable() ...
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'npoint-m142'], ...
                'cLabel', 'NPoint LC400 (Field Scanner Driver)' ...
            );
        
         end
         
         
         function initUiNPointMA(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiNPointMA = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                 'fhGet', @() this.hardware.getIsConnectedNPointMA(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectNPointMA(), ...
                        @() this.uiApp.uiMA.uiScanner.uiNPointLC400.updateCacheOfWavetable() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectNPointMA(), ...
                        @() this.uiApp.uiMA.uiScanner.uiNPointLC400.updateCacheOfWavetable() ...
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'npoint-ma'], ...
                'cLabel', 'NPoint LC400 (Pupil Scanner Driver)' ...
            );
        
         end
         
         function initUiNewFocus8742M142(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiNewFocus8742M142 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                 'fhGet', @() this.hardware.getIsConnectedNewFocus8742M142(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectNewFocus8742M142(), ...
                        @() this.uiApp.uiBeamline.uiM142.syncDestinations() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectNewFocus8742M142(), ...
                        @() this.uiApp.uiBeamline.uiM142.syncDestinations() ...
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'newfocus-8742-m142'], ...
                'cLabel', 'NewFocus 8742 (M142 tiltX/tiltY)' ...
            );
        
         end
         
         function initUiNewFocus8742MA(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiNewFocus8742MA = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                 'fhGet', @() this.hardware.getIsConnectedNewFocus8742MA(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectNewFocus8742MA(), ...
                        @() this.uiApp.uiMA.uiDiagnostics.syncDestinations() ...                    
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectNewFocus8742MA(), ...
                        @() this.uiApp.uiMA.uiDiagnostics.syncDestinations() ...                         
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'newfocus-8742-ma'], ...
                'cLabel', 'NewFocus 8742 (MA Yag, SF Wheel)' ...
            );
        
         end
        
        
        
        %{
        function initUiCxroHeightSensor(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiCxroHeightSensor = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', 'cxro-height-sensor', ...
                'cLabel', 'CXRO Height Sensor' ...
            );
        
        end
        %}
        
        
    end % private
    
    
end