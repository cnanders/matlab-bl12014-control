classdef Hardware < mic.Base
        
    properties (Constant)
       
        
        dWidthName = 500
        
    end
    
	properties
        % {mic.ui.device.GetSetLogical 1x1}
        uiAll
        
        % {mic.ui.TaskSequence 1x1}
        uiStateConnected
        
        
        uiDeltaTauPowerPmac
        % uiCxroHeightSensor
        uiDataTranslationMeasurPoint
        uiMfDriftMonitorMiddleware
        uiMfDriftMonitor
        uiKeithleyWafer
        uiKeithleyReticle
        uiWebSwitchBeamline
        uiWebSwitchEndstation
        uiWebSwitchVis
        uiBL1201CorbaProxy
        uiRigol
        uiSmarActM141
        uiWagoD141
        uiExitSlit
        
        
        uiGalilD142
        uiGalilVis
        uiGalilM143
        
        uiMightex1
        uiMightex2
        
        uiNPointM142
        uiNPointMA
        
    end
    
    properties (SetAccess = private)
        
        hParent
        cName = 'ui-hardware-'
        
    end
    
    properties (Access = private)
               
        
        clock
        uiClock
        dDelay = 0.5
        
        % {bl12014.Hardware 1x1}
        hardware
        
        % {bl120114.ui.App 1x1}
        uiApp
        
    end
    
        
    events
        
        eName
        
    end
    

    
    methods
        
        
        function this = Hardware(varargin)
            
            for k = 1 : 2: length(varargin)
                this.msg(sprintf('passed in %s', varargin{k}), this.u8_MSG_TYPE_VARARGIN_PROPERTY);
                if this.hasProp( varargin{k})
                    this.msg(sprintf(' settting %s', varargin{k}), this.u8_MSG_TYPE_VARARGIN_SET);
                    this.(varargin{k}) = varargin{k + 1};
                end
            end
            

            if ~isa(this.clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            if ~isa(this.hardware, 'bl12014.Hardware')
                error('hardware must be bl12014.Hardware');
            end
            
            
            if ~isa(this.uiClock, 'mic.Clock') && ...
               ~isa(this.uiClock, 'mic.ui.Clock')
                error('uiClock must be mic.Clock | mic.ui.Clock');
            end
            
            this.init();
            
        end
        
        
        function build(this, hParent, dLeft, dTop)
                    
            this.hParent = hParent;

            dPad = 10;
            dSep = 30;


            this.uiStateConnected.build(this.hParent, dLeft, dTop, 630);
            dTop = dTop + dSep;
            
            this.uiDeltaTauPowerPmac.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
                        
            
            this.uiMfDriftMonitor.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiMfDriftMonitorMiddleware.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiDataTranslationMeasurPoint.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiKeithleyReticle.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiKeithleyWafer.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiWebSwitchBeamline.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiWebSwitchEndstation.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiWebSwitchVis.build(this.hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiBL1201CorbaProxy.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiRigol.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiSmarActM141.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiWagoD141.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiExitSlit.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiGalilD142.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiGalilM143.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiGalilVis.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiMightex1.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiMightex2.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiNPointM142.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
            this.uiNPointMA.build(hParent, dLeft, dTop);
            dTop = dTop + dSep;
            
        end
        
                        
        
        %% Destructor
        
        function delete(this)
            
            this.uiMfDriftMonitorMiddleware = [];
            this.uiDeltaTauPowerPmac = [];
            this.uiApp = [];
            
        end
        
        
        
        function st = save(this)
            st = struct();
            
        end
        
        function load(this, st)
            
        end
               
        
        
        
        
        
    end
    
    methods (Access = private)
        
        function init(this)
            
            this.msg('init()');
            
            
            
            
            this.initUiDeltaTauPowerPmac();
            this.initUiMfDriftMonitorMiddleware();
            this.initUiMfDriftMonitor();
            this.initUiDataTranslationMeasurPoint();
            this.initUiKeithleyReticle();
            this.initUiKeithleyWafer();
            this.initUiWebSwitchBeamline();
            this.initUiWebSwitchEndstation();
            this.initUiWebSwitchVis();
            this.initUiBL1201CorbaProxy();
            this.initUiRigol();
            this.initUiSmarActM141();
            this.initUiWagoD141();
            this.initUiExitSlit();
            this.initUiGalilD142();
            this.initUiGalilM143();
            this.initUiGalilVis();
            this.initUiMightex1();
            this.initUiMightex2();
            this.initUiNPointM142();
            this.initUiNPointMA();
            
            
            % This must be at the end
            this.uiStateConnected = mic.ui.TaskSequence(...
                'cName', [this.cName, 'connected'], ...
                'task', bl12014.Tasks.createStateHardwareConnected(...
                    [this.cName, 'state-hardware-connected'], ...
                    this, ...
                    this.clock ...
                ), ...
                'lShowButton', true, ...
                'clock', this.uiClock ...
            );

        end
        
        
            

        
        
        function initUiDeltaTauPowerPmac(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiDeltaTauPowerPmac = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedDeltaTauPowerPmac(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectDeltaTauPowerPmac(), ...
                        @() this.uiApp.uiWafer.syncDestinations(), ...
                        @() this.uiApp.uiReticle.syncDestinations() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectDeltaTauPowerPmac(), ...
                        @() this.uiApp.uiWafer.syncDestinations(), ...
                        @() this.uiApp.uiReticle.syncDestinations() ...
                    )...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-delta-tau-power-pmac'], ...
                'cLabel', 'DeltaTau Power PMAC (Reticle + Wafer Stages)' ...
            );
        
        end
        
        function initUiMfDriftMonitorMiddleware(this)
            
           ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
           this.uiMfDriftMonitorMiddleware = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'cName', [this.cName, 'comm-mf-drift-monitor-middleware'], ...
                'fhGet', @() this.hardware.getIsConnectedMfDriftMonitorMiddleware(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @(lVal) mic.Utils.evalAll(...
                        @() this.hardware.connectMfDriftMonitorMiddleware(), ...
                        @() this.uiApp.uiWafer.syncDestinations() ...
                    ), ...
                    @(lVal) mic.Utils.evalAll(...
                        @() this.hardware.disconnectMfDriftMonitorMiddleware(), ...
                        @() this.uiApp.uiWafer.syncDestinations() ...
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'MF DriftMon Middleware (Height sensor z, tiltX, tiltY)'...
           ); 
                
               
            
        end
        
        function initUiMfDriftMonitor(this)
            
           ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
           this.uiMfDriftMonitor = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'cName', [this.cName, 'comm-mf-drift-monitor'], ...
                'fhGet', @() this.hardware.getIsConnectedMfDriftMonitor(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @(lVal) mic.Utils.evalAll(...
                        @() this.hardware.connectMfDriftMonitor() ...
                    ), ...
                    @(lVal) mic.Utils.evalAll(...
                        @() this.hardware.disconnectMfDriftMonitor() ...
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'MF Drift Monitor (DMI Vibration Analysis)'...
           ); 
                
               
            
        end
        
         function initUiDataTranslationMeasurPoint(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiDataTranslationMeasurPoint = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedDataTranslation(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectDataTranslation(), ...
                    @() this.hardware.disconnectDataTranslatino() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'data-translation-measur-point'], ...
                'cLabel', 'DataTrans MeasurPoint (RTDs, TCs, Beamline Diodes, DMI Power Levels)' ...
            );
        
         end
        
         function initUiKeithleyReticle(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiKeithleyReticle = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-keithley-6482-reticle'], ...
                'fhGet', @() this.hardware.getIsConnectedKeithley6482Reticle(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectKeithley6482Reticle(), ...
                    @() this.hardware.disconnectKeithley6482Reticle() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Keithley 6482 (Reticle Diode, SFPFM Diode)' ...
            );
        
         end
        
         
         function initUiKeithleyWafer(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiKeithleyWafer = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-keithley-6482-wafer'], ...
                'fhGet', @() this.hardware.getIsConnectedKeithley6482Wafer(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectKeithley6482Wafer(), ...
                    @() this.hardware.disconnectKeithley6482Wafer() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Keithley 6482 (Wafer Diode, Focus Montior Diode)' ...
            );
        
         end
        
         function initUiWebSwitchVis(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiWebSwitchVis = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedWebSwitchVis(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectWebSwitchVis(), ...
                    @() this.hardware.disconnectWebSwitchVis() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-webswitch-vis'], ...
                'cLabel', 'WebSwitch (VIS Power)' ...
            );
        
         end
        
         function initUiWebSwitchEndstation(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiWebSwitchEndstation = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedWebSwitchEndstation(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectWebSwitchEndstation(), ...
                    @() this.hardware.disconnectWebSwitchEndstation() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-webswitch-endstation'], ...
                'cLabel', 'WebSwitch (Endstation Camera + LED power)' ...
            );
        
         end
        
         function initUiWebSwitchBeamline(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiWebSwitchBeamline = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'cLabelName', '', ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedWebSwitchBeamline(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectWebSwitchBeamline(), ...
                    @() this.hardware.disconnectWebSwitchBeamline() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-webswitch-beamline'], ...
                'cLabel', 'WebSwitch (BL Camera + LED Power)' ...
            );
        
         end
        
         
         function initUiBL1201CorbaProxy(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiBL1201CorbaProxy = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                 'fhGet', @() this.hardware.getIsConnectedBL1201CorbaProxy(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectBL1201CorbaProxy(), ...
                    @() this.hardware.disconnectBL1201CorbaProxy() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'bl1201-corba-proxy'], ...
                'cLabel', 'BL1201 Corba Proxy (Angle of Mono Grating, Gap of Undulator)' ...
            );
        
         end
        
         function initUiRigol(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiRigol = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-rigol'], ...
                'fhGet', @() this.hardware.getIsConnectedRigolDG1000Z(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectRigolDG1000Z(), ...
                    @() this.hardware.disconnectRigolDG1000Z() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Rigol DG1000Z (Shutter)' ...
            );
        
         end
        
         function initUiSmarActM141(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiSmarActM141 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-smaract-m141'], ...
                'fhGet', @() this.hardware.getIsConnectedSmarActM141(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectSmarActM141(), ...
                    @() this.hardware.disconnectSmarActM141() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'SmarAct (M141 x, tiltX, tiltY)' ...
            );
        
         end
        
         function initUiWagoD141(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiWagoD141 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-wago-d141'], ...
                'fhGet', @() this.hardware.getIsConnectedWagoD141(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectWagoD141(), ...
                    @() this.hardware.disconnectWagoD141() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Wago (D141 Insert/Remove)' ...
            );
        
         end
        
         function initUiExitSlit(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiExitSlit = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-exit-slit'], ...
                'fhGet', @() this.hardware.getIsConnectedExitSlit(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectExitSlit(), ...
                        @() this.uiApp.uiBeamline.uiExitSlit.syncDestinations(), ...
                        @() this.uiApp.uiTuneFluxDensity.uiExitSlit.syncDestinations() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectExitSlit(), ...
                        @() this.uiApp.uiBeamline.uiExitSlit.syncDestinations(), ...
                        @() this.uiApp.uiTuneFluxDensity.uiExitSlit.syncDestinations() ...
                    ) ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Exit Slit' ...
            );
        
         end
        
         function initUiGalilD142(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiGalilD142 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-galil-d142'], ...
                'fhGet', @() this.hardware.getIsConnectedGalilD142(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectGalilD142(), ...
                    @() this.hardware.disconnectGalilD142() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Galil (D142 Vertical Stage)' ...
            );
        
         end
        
         
         function initUiGalilM143(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiGalilM143  = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-galil-m143'], ...
                'fhGet', @() this.hardware.getIsConnectedGalilM143(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectGalilM143(), ...
                    @() this.hardware.disconnectGalilM143() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Galil (M143 Vertical Stage)' ...
            );
        
         end
        
         
         function initUiGalilVis(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiGalilVis = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', [this.cName, 'comm-galil-vis'], ...
                'fhGet', @() this.hardware.getIsConnectedGalilVis(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectGalilVis(), ...
                    @() this.hardware.disconnectGalilVis() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cLabel', 'Galil (VIS Spring Motors)' ...
            );
        
         end
        
         function initUiMightex1(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiMightex1 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedMightex1(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectMightex1(), ...
                        @() this.uiApp.uiHeightSensorLEDs.syncDestinations() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectMightex1(), ...
                        @() this.uiApp.uiHeightSensorLEDs.syncDestinations() ...
                    )...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-mightex-universal-led-controller-1'], ...
                'cLabel', 'Mightex Universal LED Controller 1 (Height Sensor LEDs)' ...
            );
        
         end
        
         function initUiMightex2(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiMightex2 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'fhGet', @() this.hardware.getIsConnectedMightex2(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.connectMightex2(), ...
                        @() this.uiApp.uiHeightSensorLEDs.syncDestinations() ...
                    ), ...
                    @() mic.Utils.evalAll(...
                        @() this.hardware.disconnectMightex2(), ...
                        @() this.uiApp.uiHeightSensorLEDs.syncDestinations() ...
                    )...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'comm-mightex-universal-led-controller-2'], ...
                'cLabel', 'Mightex Universal LED Controller 2 (Height Sensor LEDs)' ...
            );
        
         end
        
         
         function initUiNPointM142(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiNPointM142 = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                 'fhGet', @() this.hardware.getIsConnectedNPointM142(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectNPointM142(), ...
                    @() this.hardware.disconnectNPointM142() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'npoint-m142'], ...
                'cLabel', 'NPoint LC400 (Field Scanner Driver)' ...
            );
        
         end
         
         
         function initUiNPointMA(this)
            
            
            % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };

            this.uiNPointMA = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                 'fhGet', @() this.hardware.getIsConnectedNPointMA(), ...
                'fhSet', @(lVal) mic.Utils.ternEval(...
                    lVal, ...
                    @() this.hardware.connectNPointMA(), ...
                    @() this.hardware.disconnectNPointMA() ...
                ), ...
                'fhIsVirtual', @() false, ...
                'lUseFunctionCallbacks', true, ...
                'cName', [this.cName, 'npoint-ma'], ...
                'cLabel', 'NPoint LC400 (Pupil Scanner Driver)' ...
            );
        
         end
        
        
        
        %{
        function initUiCxroHeightSensor(this)
            
             % Configure the mic.ui.common.Toggle instance
            ceVararginCommandToggle = {...
                'cTextTrue', 'Disconnect', ...
                'cTextFalse', 'Connect' ...
            };
        
            this.uiCxroHeightSensor = mic.ui.device.GetSetLogical(...
                'clock', this.uiClock, ...
                'ceVararginCommandToggle', ceVararginCommandToggle, ...
                'dWidthName', this.dWidthName, ...
                'lShowLabels', false, ...
                'lShowDevice', false, ...
                'lShowInitButton', false, ...
                'cName', 'cxro-height-sensor', ...
                'cLabel', 'CXRO Height Sensor' ...
            );
        
        end
        %}
        
        
    end % private
    
    
end