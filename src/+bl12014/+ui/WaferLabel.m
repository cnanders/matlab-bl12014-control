classdef WaferLabel < mic.Base
    
    properties
              
        cName = 'Wafer Label'




        % Label properties
        uieWaferID
        uibLoadLatest
        uibLoadFromID
        uibLoadFromList

        uilWaferList

        uibLoadInfoFromTool

        % Labels:
        uitHeader
        uitX

        % Litho
        uiePrescription
        uieFEMNDose
        uieFEMNFocus

        uieDose
        uieDoseStep
        uieFocus
        uieFocusStep
        uipDoseStepType

        uieMaskName
        uieMaskField
        uiePupilFill
        
        uieLithoNotes

        stLastLogTimes 



        % Flux
        uipSourceType % ALS, SAS
        
        
        uiFluxPopin
        uiFluxIF
        uiFluxSF_EUV
        uiFluxSF_VIS
        uiFluxReticle_F2X
        uiFluxReticle_Cal
        uiFluxReticle_shift_illumination1
        uiFluxReticle_shift_illumination2

        uiFluxWafer_CF
        uiFluxWafer_shift_illumination
        
        
        setSourceFlux
        setSFWhiteLightFlux
        setSFEUVFlux
        setReticleFlux
        
        cDirThis
        cDirSrc
    end
    
    properties (Access = private)
        
        % {bl12014.Hardware 1x1}
        hardware
        clock
        
        dWidthName = 200
        dWidth = 1850;
        dHeight = 1040;

        
        
    end
    
    
    methods
        
        function this = WaferLabel(varargin)
            for k = 1 : 2: length(varargin)
                this.msg(sprintf('passed in %s', varargin{k}), this.u8_MSG_TYPE_VARARGIN_PROPERTY);
                if this.hasProp( varargin{k})
                    this.msg(sprintf(' settting %s', varargin{k}), this.u8_MSG_TYPE_VARARGIN_SET);
                    this.(varargin{k}) = varargin{k + 1};
                end
            end
            
           
            
            if ~isa(this.hardware, 'bl12014.Hardware')
                error('hardware must be bl12014.Hardware');
            end

            this.cDirThis = fileparts(mfilename('fullpath'));
            this.cDirSrc = fullfile(this.cDirThis, '..', '..');
            
            this.init();
            
        end
        
        

        
        
        
        

        
        function build(this, hParent, dLeft, dTop)

            this.buildFlux(hParent, dLeft, dTop)
            this.buildLabel(hParent, dLeft, dTop + 500)
          
           
           
            
            
        end

        function buildFlux(this, hParent, dLeft, dTop)
            hPanel = uipanel(...
                'Parent', hParent,...
                'Units', 'pixels',...
                'Title', 'Flux Diagnostics',...
                'Clipping', 'on',...
                'Position', mic.Utils.lt2lb([ ...
                dLeft ...
                dTop + 50 ...
                this.dWidth ...
                500], hParent) ...
            );

            dTop = 30;

            dTopSep = 40;



            this.uiFluxPopin.build(hPanel, 10, dTop); dTop = dTop + dTopSep;
            this.uiFluxIF.build(hPanel, 10, dTop); dTop = dTop + dTopSep;
            this.uiFluxSF_EUV.build(hPanel, 10, dTop); dTop = dTop + dTopSep;
            this.uiFluxSF_VIS.build(hPanel, 10, dTop); dTop = dTop + dTopSep;
            this.uiFluxReticle_F2X.build(hPanel, 10, dTop); dTop = dTop + dTopSep;
            this.uiFluxReticle_Cal.build(hPanel, 10, dTop); dTop = dTop + dTopSep;

            dTop = dTop + 20;

            this.uiFluxReticle_shift_illumination1.build(hPanel, 10, dTop); dTop = dTop + dTopSep;
            this.uiFluxReticle_shift_illumination2.build(hPanel, 10, dTop); dTop = dTop + dTopSep;
            this.uiFluxWafer_CF.build(hPanel, 10, dTop); dTop = dTop + dTopSep;
            this.uiFluxWafer_shift_illumination.build(hPanel, 10, dTop); dTop = dTop + dTopSep;


            % dHeight = dHeight + 30;
            % this.setSFWhiteLightFlux.build(hPanel, 10, dHeight);

            % dHeight = dHeight + 30;
            % this.setSFEUVFlux.build(hPanel, 10, dHeight);


           

        end

        function buildLabel(this, hParent, dLeft, dTop)

            dCol1 = 10;
            dCol2 = 240;
            dCol3 = 310;
            dCol4 = 610;
            dCol5 = 810;

            dHeightPad = 45;


            hPanel = uipanel(...
                'Parent', hParent,...
                'Units', 'pixels',...
                'Title', 'Label',...
                'Clipping', 'on',...
                'Position', mic.Utils.lt2lb([ ...
                dLeft ...
                dTop ...
                this.dWidth ...
                500], hParent) ...
            );

            this.uitHeader.build(hPanel, 10, 10, 300, 30);

            dHeight = 60;
            this.uieWaferID.build(hPanel, dCol1, dHeight, this.dWidthName, 30);

            dHeight = dHeight + 45;

            this.uibLoadLatest.build(hPanel, dCol1, dHeight + 10, 150, 30);

            dHeight = 60;


            this.uiePrescription.build(hPanel, dCol3, dHeight, this.dWidthName, 30), dHeight = dHeight + dHeightPad + 20;
            this.uieFEMNDose.build(hPanel, dCol3, dHeight, this.dWidthName/2 - 30, 30);
            this.uitX.build(hPanel, dCol3 + this.dWidthName/2 - 20, dHeight + 15, 20, 30);
            this.uieFEMNFocus.build(hPanel, dCol3 + this.dWidthName/2 + 5, dHeight, this.dWidthName/2 - 5, 30), dHeight = dHeight + dHeightPad;
            this.uieDose.build(hPanel, dCol3, dHeight, this.dWidthName/2 - 5, 30);
            this.uieDoseStep.build(hPanel, dCol3 + this.dWidthName/2 + 5, dHeight, this.dWidthName/2 - 5, 30);
            this.uipDoseStepType.build(hPanel, dCol3 + this.dWidthName + 20, dHeight , 100, 30), dHeight = dHeight + dHeightPad; 

            this.uieFocus.build(hPanel, dCol3, dHeight, this.dWidthName/2 - 5, 30);
            this.uieFocusStep.build(hPanel, dCol3 + this.dWidthName/2 + 5, dHeight, this.dWidthName/2 - 5, 30), dHeight = dHeight + dHeightPad + 20;


            this.uieMaskName.build(hPanel, dCol3, dHeight, this.dWidthName, 30), dHeight = dHeight + dHeightPad;
            this.uieMaskField.build(hPanel, dCol3, dHeight, this.dWidthName, 30), dHeight = dHeight + dHeightPad;
            this.uiePupilFill.build(hPanel, dCol3, dHeight, this.dWidthName, 30), dHeight = dHeight + dHeightPad;

            this.uibLoadInfoFromTool.build(hPanel, dCol3, dHeight + 10, 150, 30);






        end
        
        function delete(this)
            
           
                       
            
        end    


        function onFocus(this)
            this.msg('onFocus()');
        end

        function onLoadLatest(this, src, evt)

            % Define the URL
            url = 'https://met.lbl.gov/wafer/getLatestWafer';

%             if strcmp(license('inuse').user, 'rhmiyakawa')
%                 url = 'https://local.met.lbl.gov/wafer/getLatestWafer';
%             end 

            % Specify additional request options, such as headers
            options = weboptions('HeaderFields', {'params', jsonencode(struct(...
                'ff176a6b', 'a8c3bf12'...
            ))});

            % Perform the GET request with additional options
            response = webread(url, options);

            this.populateFieldsFromResponse(response);
           





        end

        function populateFieldsFromResponse(this, response)
            if isfield(response, 'Wafer_ID')
                this.uieWaferID.set(response.Wafer_ID);
            end

            if isfield(response, 'Prescription')
                this.uiePrescription.set(response.Prescription);
            end

            if isfield(response, 'Mask_Name')
                this.uieMaskName.set(response.Mask_Name);
            end

            if isfield(response, 'Mask_Field')
                this.uieMaskField.set(response.Mask_Field);
            end

            if isfield(response, 'Illumination')
                this.uiePupilFill.set(response.Illumination);
            end

            if isfield(response, 'Size')
                
                femSize = response.Size;
                % Fem size is a string of the form '10x10'
                femSize = strsplit(femSize, 'x');
                this.uieFEMNDose.set(str2double(femSize{1}));
                this.uieFEMNFocus.set(str2double(femSize{2}));
            end

            if isfield(response, 'Nominal_Dose')
                this.uieDose.set(str2double(response.Nominal_Dose));
            end

            if isfield(response, 'Focus')
                this.uieFocus.set(str2double(response.Focus));
            end

            if isfield(response, 'Focus_Step')
                this.uieFocusStep.set(str2double(response.Focus_Step));
            end

            if isfield(response, 'Dose_Step')       
                doseStep = response.Dose_Step;
                % Dose step is a string of the form '10 % lin' or '10% exp', just pull out the number:
                match = regexp(doseStep,  '(\d+)\s*%?\s*(\w+)', 'tokens');
                if (length(match{1}) >=1)
                    this.uieDoseStep.set(str2double(match{1}{1}));
                end

                if (length(match{1}) >=2)
                    doseStepType = match{1}{2};
                    if strcmp(lower(doseStepType), 'lin')
                        this.uipDoseStepType.setSelectedIndex(uint8(1));
                    else
                        this.uipDoseStepType.setSelectedIndex(uint8(2));
                    end
                end
            end




        end
        
        
    end
    
    methods (Access = private)
        
                
        function init(this)

            this.initLogIndicators();
            
            this.msg('init()');

            this.uiFluxPopin = bl12014.ui.FluxLogger( ...
                'clock', this.clock, ...
                'fhGetter',@()this.hardware.getDataTranslation().getScanDataOfChannel(42), ...
                'fhIsLogged',@() true, ...
                'fhSetFlux',@() 1, ...
                'cBlankColor', 'red', ...
                'cLabel', 'EUVT Source Pop-in diode'...
            );

            this.uiFluxIF = bl12014.ui.FluxLogger( ...
                'clock', this.clock, ...
                'fhGetter',@()this.hardware.getDataTranslation().getScanDataOfChannel(42), ...
                'fhIsLogged',@() true, ...
                'fhSetFlux',@() 1, ...
                'cBlankColor', 'red', ...
                'cLabel', 'Intermediate focus diode'...
            );

            this.uiFluxSF_EUV = bl12014.ui.FluxLogger( ...
                'clock', this.clock, ...
                'fhGetter',@()this.hardware.getKeithley6482Reticle().read(2), ...
                'fhIsLogged',@() true, ...
                'fhSetFlux',@() 1, ...
                'cBlankColor', 'red', ...
                'cLabel', 'Subframe diode (EUV)'...
            );

            this.uiFluxSF_VIS = bl12014.ui.FluxLogger( ...
                'clock', this.clock, ...
                'fhGetter',@()this.hardware.getKeithley6482Reticle().read(2), ...
                'fhIsLogged',@() true, ...
                'fhSetFlux',@() 1, ...
                'cBlankColor', 'red', ...
                'cLabel', 'Subframe diode (VIS)'...
            );

            this.uiFluxReticle_F2X = bl12014.ui.FluxLogger( ...
                'clock', this.clock, ...
                'fhGetter',@()this.hardware.getKeithley6482Reticle().read(1), ...
                'fhIsLogged',@() true, ...
                'fhSetFlux',@() 1, ...
                'cBlankColor', 'red', ...
                'cLabel', 'Reticle diode (F2X)'...
            );

            this.uiFluxReticle_Cal = bl12014.ui.FluxLogger( ...
                'clock', this.clock, ...
                'fhGetter',@()this.hardware.getKeithley6482Reticle().read(1), ...
                'fhIsLogged',@() true, ...
                'fhSetFlux',@() 1, ...
                'cBlankColor', 'red', ...
                'cLabel', 'Reticle diode (Annular cal)'...
            );

            this.uiFluxReticle_shift_illumination1 = bl12014.ui.FluxLogger( ...
                'clock', this.clock, ...
                'fhGetter',@()this.hardware.getKeithley6482Reticle().read(1), ...
                'fhIsLogged',@() false, ...
                'fhSetFlux',@() 1, ...
                'cBlankColor', 'purple', ...
                'cLabel', 'Reticle diode illumination 1*'...
            );
            this.uiFluxReticle_shift_illumination2 = bl12014.ui.FluxLogger( ...
                'clock', this.clock, ...
                'fhGetter',@()this.hardware.getKeithley6482Reticle().read(1), ...
                'fhIsLogged',@() false, ...
                'fhSetFlux',@() 1, ...
                'cBlankColor', 'purple', ...
                'cLabel', 'Reticle diode illumination 2*'...
            );

            this.uiFluxWafer_CF = bl12014.ui.FluxLogger( ...
                'clock', this.clock, ...
                'fhGetter',@()this.hardware.getKeithley6482Wafer().read(1), ...
                'fhIsLogged',@() true, ...
                'fhSetFlux',@() 1, ...
                'cBlankColor', 'purple', ...
                'cLabel', 'Wafer diode (CF)'...
            );

            this.uiFluxWafer_shift_illumination = bl12014.ui.FluxLogger( ...
                'clock', this.clock, ...
                'fhGetter',@()this.hardware.getKeithley6482Wafer().read(1), ...
                'fhIsLogged',@() false, ...
                'fhSetFlux',@() 1, ...
                'cBlankColor', 'purple', ...
                'cLabel', 'Wafer diode shift *'...
            );


            this.setSourceFlux = mic.ui.device.GetNumber(...
                'clock', this.clock, ...    
                'cName', [this.cName, 'Source Diode'], ... 
                'config', mic.config.GetSetNumber(...
                            'cPath',  fullfile(...
                                bl12014.Utils.pathUiConfig(), ...
                                'get-number', ...
                                'config-amps.json' ...
                            ) ...
                        ), ...
                'cLabel', 'Source Diode', ...
                'dWidthPadUnit', 10, ...
                'dWidthName', 150,...
                'dWidthPadUnit', -40, ...
                'lShowInitButton', false, ...
                'lShowLabels', false, ...
                'fhGet',@() 1, ...
                'fhSet',@() 1, ...
                'fhIsVirtual', @() false, ...
                'lShowRel', false, ...
                'lShowZero', false, ...
                'lShowVal', true,...
                'lShowStepNeg', false, ...
                'lShowStepPos', false, ...
                'lShowStep', false, ...
                'lUseFunctionCallbacks', true ...
            );

            % setSFWhiteLightFlux
            this.setSFWhiteLightFlux = mic.ui.device.GetSetNumber(...
                'clock', this.clock, ...    
                'cName', [this.cName, 'SF WL'], ... 
                'config', mic.config.GetSetNumber(...
                            'cPath',  fullfile(...
                                bl12014.Utils.pathUiConfig(), ...
                                'get-number', ...
                                'config-volts.json' ...
                            ) ...
                        ), ...
                'cLabel', 'SF Diode White Light', ...
                'dWidthPadUnit', 10, ...
                'dWidthName', 150,...
                'dWidthPadUnit', -40, ...
                'lShowInitButton', false, ...
                'lShowLabels', false, ...
                'fhGet',@() 1, ...
                'fhSet',@() 1, ...
                'fhIsVirtual', @() false, ...
                'lShowRel', false, ...
                'lShowZero', false, ...
                'lShowVal', false,...
                'lShowStepNeg', false, ...
                'lShowStepPos', false, ...
                'lShowStep', false, ...
                'lUseFunctionCallbacks', true ...
            );

            % setSFEUVFlux
            this.setSFEUVFlux = mic.ui.device.GetSetNumber(...
                'clock', this.clock, ...    
                'cName', [this.cName, 'SF EUV'], ... 
                'config', mic.config.GetSetNumber(...
                            'cPath',  fullfile(...
                                bl12014.Utils.pathUiConfig(), ...
                                'get-number', ...
                                'config-volts.json' ...
                            ) ...
                        ), ...
                'cLabel', 'SF Diode EUV', ...
                'dWidthPadUnit', 10, ...
                'dWidthName', 150,...
                'dWidthPadUnit', -40, ...
                'lShowInitButton', false, ...
                'lShowLabels', false, ...
                'fhGet',@() 1, ...
                'fhSet',@() 1, ...
                'fhIsVirtual', @() false, ...
                'lShowRel', false, ...
                'lShowZero', false, ...
                'lShowVal', false,...
                'lShowStepNeg', false, ...
                'lShowStepPos', false, ...
                'lShowStep', false, ...
                'lUseFunctionCallbacks', true ...
            );
            % setReticleFlux
                        
           
            this.uilWaferList = mic.ui.common.List();


            % Init labels:
            this.uitHeader = mic.ui.common.Text(...
                'cVal', 'Upload Wafer Litho Info',...
                'dFontSize', 24 ...
            );
            this.uitX = mic.ui.common.Text(...
                'cVal', 'X',...
                'dFontSize', 18 ...
            );
        
            % Init edit boxes:


            this.uieWaferID        = mic.ui.common.Edit( 'cLabel', 'Wafer ID', 'cType', 'c');

            this.uiePrescription    = mic.ui.common.Edit( 'cLabel', 'Prescription', 'cType', 'c');
            this.uieFEMNDose        = mic.ui.common.Edit( 'cLabel', 'FEM Dose', 'cType', 'd');
            this.uieFEMNFocus       = mic.ui.common.Edit( 'cLabel', 'FEM Focus', 'cType', 'd');
            this.uieDose            = mic.ui.common.Edit( 'cLabel', 'Center Dose', 'cType', 'd');
            this.uieDoseStep        = mic.ui.common.Edit( 'cLabel', 'Dose Step', 'cType', 'd');
            this.uieFocus           = mic.ui.common.Edit( 'cLabel', 'Center Focus', 'cType', 'd');
            this.uieFocusStep       = mic.ui.common.Edit( 'cLabel', 'Focus Step', 'cType', 'd');
            this.uieMaskName        = mic.ui.common.Edit( 'cLabel', 'Mask Name', 'cType', 'c');
            this.uieMaskField       = mic.ui.common.Edit( 'cLabel', 'Mask Field', 'cType', 'c');
            this.uiePupilFill       = mic.ui.common.Edit( 'cLabel', 'Pupil Fill', 'cType', 'c');

            this.uipDoseStepType   = mic.ui.common.Popup(...
                'cLabel', 'Dose Step Type', ...
                'ceOptions', {'Linear', 'Exponential'} ...
            );

            this.uibLoadLatest      = mic.ui.common.Button(...
                'cText', 'Load Latest Wafer', ...
                'fhDirectCallback', @this.onLoadLatest ...
            );

            this.uibLoadInfoFromTool = mic.ui.common.Button(...
                'cText', 'Load Info From Tool', ...
                'fhDirectCallback', @this.onLoadInfoFromTool ...
            );
    



            
        end


        function initLogIndicators(this)

            % first try to load the last log times from file
            try
                url = 'https://met.lbl.gov/wafer/getLastLogTimes';

            catch

            end

                    
            this.stLastLogTimes = struct(...
                'popin', struct('value', 0, 'timestamp', '2024-02-24 09:38:40'), ...
                'IF', struct('value', 0, 'timestamp', '2024-02-24 09:38:40'), ...
                'SF_VIS', struct('value', 0, 'timestamp', '2024-02-24 09:38:40'), ...
                'SF_EUV', struct('value', 0, 'timestamp', '2024-02-24 09:38:40'), ...
                'Reticle_F2X', struct('value', 0, 'timestamp', '2024-02-24 09:38:40'), ...
                'Reticle_Cal', struct('value', 0, 'timestamp', '2024-02-24 09:38:40'), ...
                'Reticle_shift_illumination1', struct('value', 0, 'timestamp', '2024-02-24 09:38:40'), ...
                'Reticle_shift_illumination2', struct('value', 0, 'timestamp', '2024-02-24 09:38:40'), ...
                'Wafer_CF', struct('value', 0, 'timestamp', '2024-02-24 09:38:40'), ...
                'Wafer_shift_illumination', struct('value', 0, 'timestamp', '2024-02-24 09:38:40')...
            )

        end
        
     
                
        
        
    end
    
    
end

