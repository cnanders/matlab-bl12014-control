classdef Tasks < mic.Base
        
    properties (Constant)
       
        
        
    end
    
	properties
        
       
    end
    
    properties (SetAccess = private)
        
        
        
    end
    
    properties (Access = private)
                    
        
        
        
       
    end
    
        
    events
        
        
    end
    

    
    methods
        
        
        function this = Tasks()
            
                        
            
        end
        
    end
    
    methods (Static)
        
        
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {bl12014.ui.PowerPmacWorkingMode 1x1}
        % @param {mic.Clock 1x1}
        function task = createSequenceTurnOnWaferAndReticleHydra(cName, uiMotMin, uiWorkingMode, clock)
            
            ceTasks = {...
                mic.Task.fromUiGetSetText(uiWorkingMode, '0', 'Working Mode'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui1, 4, 0.1, 'A', 'WCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui2, 4, 0.1, 'A', 'WCY MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui3, 4, 0.1, 'A', 'RCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui4, 4, 0.1, 'A', 'RCY MotMin'), ...
                mic.Task.fromUiGetSetText(uiWorkingMode, '1', 'Working Mode') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Turn On Wafer+Reticle' ...
            );
        end
        
        
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {bl12014.ui.PowerPmacWorkingMode 1x1}
        % @param {mic.Clock 1x1}
        function task = createSequenceTurnOnWaferHydra(cName, uiMotMin, uiWorkingMode, clock)
            
            ceTasks = {...
                mic.Task.fromUiGetSetText(uiWorkingMode, '0', 'Working Mode'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui1, 4, 0.1, 'A', 'WCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui2, 4, 0.1, 'A', 'WCY MotMin'), ...
                mic.Task.fromUiGetSetText(uiWorkingMode, '1', 'Working Mode') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Turn On Wafer' ...
            );
        end
        
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {bl12014.ui.PowerPmacWorkingMode 1x1}
        % @param {mic.Clock 1x1}
        function task = createSequenceTurnOffWaferHydra(cName, uiMotMin, uiWorkingMode, clock)
            
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetText(uiWorkingMode, '0', 'Working Mode'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui1, 0, 0.1, 'A', 'WCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui2, 0, 0.1, 'A', 'WCY MotMin'), ...
                mic.Task.fromUiGetSetText(uiWorkingMode, '1', 'Working Mode') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Turn Off Wafer' ...
            );
        end
        
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {bl12014.ui.PowerPmacWorkingMode 1x1}
        % @param {mic.Clock 1x1}
        function task = createSequenceTurnOffAllHydras(cName, uiMotMin, uiWorkingMode, clock)
            
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetText(uiWorkingMode, '0', 'Working Mode'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui1, 0, 0.1, 'A', 'WCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui2, 0, 0.1, 'A', 'WCY MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui3, 0, 0.1, 'A', 'RCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui4, 0, 0.1, 'A', 'RCY MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui5, 0, 0.1, 'A', 'LSIX MotMin'), ...
                mic.Task.fromUiGetSetText(uiWorkingMode, '1', 'Working Mode') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Turn Off All' ...
            );
        end
        
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {mic.Clock 1x1}
        function task = createStateWaferHydraOn(cName, uiMotMin, clock)
               
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui1, 4, 0.1, 'A'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui2, 4, 0.1, 'A'), ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Wafer On' ...
            );
        end
        
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {mic.Clock 1x1}
        function task = createStateReticleHydraOn(cName, uiMotMin, clock)
                
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui3, 4, 0.1, 'A'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui4, 4, 0.1, 'A'), ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Reticle On' ...
            );
        end
        
        
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {mic.Clock 1x1}
        function task = createStateLsiHydraOn(cName, uiMotMin, clock)
                
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui5, 4, 0.1, 'A') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'LSI On' ...
            );
        end
        
        
        function createSequenceTurnOnReticleHydra()
        end
        
        function createSeqeunceTurnOnLsiHydra()
        end
        
        
        
        
    end 
    
    
end