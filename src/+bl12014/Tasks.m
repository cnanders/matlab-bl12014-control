classdef Tasks < mic.Base
        
    properties (Constant)
       
        
        
    end
    
	properties
        
       
    end
    
    properties (SetAccess = private)
        
        
        
    end
    
    properties (Access = private)
                    
        
        
        
       
    end
    
        
    events
        
        
    end
    

    
    methods
        
        
        function this = Tasks()
            
                        
            
        end
        
    end
    
    methods (Static)
        
        
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {bl12014.ui.PowerPmacWorkingMode 1x1}
        % @param {mic.Clock 1x1}
        function task = createSequenceTurnOnWaferAndReticleHydra(cName, uiMotMin, uiWorkingMode, clock)
            
            ceTasks = {...
                mic.Task.fromUiGetSetText(uiWorkingMode, '0', 'Working Mode'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui1, 4, 0.1, 'A', 'WCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui2, 4, 0.1, 'A', 'WCY MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui3, 4, 0.1, 'A', 'RCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui4, 4, 0.1, 'A', 'RCY MotMin'), ...
                mic.Task.fromUiGetSetText(uiWorkingMode, '1', 'Working Mode') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Turn On Wafer+Reticle' ...
            );
        end
        
        
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {bl12014.ui.PowerPmacWorkingMode 1x1}
        % @param {mic.Clock 1x1}
        function task = createSequenceTurnOnWaferHydra(cName, uiMotMin, uiWorkingMode, clock)
            
            ceTasks = {...
                mic.Task.fromUiGetSetText(uiWorkingMode, '0', 'Working Mode'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui1, 4, 0.1, 'A', 'WCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui2, 4, 0.1, 'A', 'WCY MotMin'), ...
                mic.Task.fromUiGetSetText(uiWorkingMode, '1', 'Working Mode') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Turn On Wafer' ...
            );
        end
        
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {bl12014.ui.PowerPmacWorkingMode 1x1}
        % @param {mic.Clock 1x1}
        function task = createSequenceTurnOffWaferHydra(cName, uiMotMin, uiWorkingMode, clock)
            
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetText(uiWorkingMode, '0', 'Working Mode'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui1, 0, 0.1, 'A', 'WCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui2, 0, 0.1, 'A', 'WCY MotMin'), ...
                mic.Task.fromUiGetSetText(uiWorkingMode, '1', 'Working Mode') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Turn Off Wafer' ...
            );
        end
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {bl12014.ui.PowerPmacWorkingMode 1x1}
        % @param {mic.Clock 1x1}
        function task = createSequenceTurnOffAllHydras(cName, uiMotMin, uiWorkingMode, clock)
            
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetText(uiWorkingMode, '0', 'Working Mode'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui1, 0, 0.1, 'A', 'WCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui2, 0, 0.1, 'A', 'WCY MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui3, 0, 0.1, 'A', 'RCX MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui4, 0, 0.1, 'A', 'RCY MotMin'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui5, 0, 0.1, 'A', 'LSIX MotMin'), ...
                mic.Task.fromUiGetSetText(uiWorkingMode, '1', 'Working Mode') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Turn Off All' ...
            );
        end
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {mic.Clock 1x1}
        function task = createStateWaferHydraOn(cName, uiMotMin, clock)
               
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui1, 4, 0.1, 'A'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui2, 4, 0.1, 'A'), ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Wafer On' ...
            );
        end
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {mic.Clock 1x1}
        function task = createStateReticleHydraOn(cName, uiMotMin, clock)
                
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui3, 4, 0.1, 'A'), ...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui4, 4, 0.1, 'A'), ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Reticle On' ...
            );
        end
        
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.PowerPmacHydraMotMin 1x1}
        % @param {mic.Clock 1x1}
        function task = createStateLsiHydraOn(cName, uiMotMin, clock)
                
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetNumber(uiMotMin.ui5, 4, 0.1, 'A') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'LSI On' ...
            );
        end
        
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.ReticleCoarseStage 1x1} ui
        % @param {mic.Clock 1x1}
        function task = createStateReticleStageAtClearField(cName, ui, clock)
                
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetNumber(ui.uiX, 64.5, 0.01, 'mm', 'Reticle Coarse X'), ...
                mic.Task.fromUiGetSetNumber(ui.uiY, 19.08, 0.01, 'mm', 'Reticle Coarse Y'), ...
                mic.Task.fromUiGetSetNumber(ui.uiZ, 19.08, 0.01, 'mm', 'Reticle Coarse Z') ...

            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Reticle at Clear Field' ...
            );
        end
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.WaferCoarseStage 1x1} ui
        % @param {mic.Clock 1x1}
        function task = createStateWaferStageAtDiode(cName, ui, clock)
                
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetNumber(ui.uiX, -103.45, 0.01, 'mm', 'Wafer Coarse X'), ...
                mic.Task.fromUiGetSetNumber(ui.uiY, 6.95, 0.01, 'mm', 'Wafer Coarse Y'), ...
                mic.Task.fromUiGetSetNumber(ui.uiZ, 0.313, 0.01, 'mm', 'Wafer Coarse Z'), ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Wafer at Diode' ...
            );
        end
        
        
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.HeightSensorLEDs 1x1} ui
        % @param {mic.Clock 1x1}
        function task = createStateHeightSensorLEDsOff(cName, ui, clock)
                
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                mic.Task.fromUiGetSetNumber(ui.ui1, 0, 0.01, 'mA', 'Height Sensor LED Ch 1'), ...
                mic.Task.fromUiGetSetNumber(ui.ui2, 0, 0.01, 'mA', 'Height Sensor LED Ch 2'), ...
                mic.Task.fromUiGetSetNumber(ui.ui3, 0, 0.01, 'mA', 'Height Sensor LED Ch 3'), ...
                mic.Task.fromUiGetSetNumber(ui.ui4, 0, 0.01, 'mA', 'Height Sensor LED Ch 4'), ...
                mic.Task.fromUiGetSetNumber(ui.ui5, 0, 0.01, 'mA', 'Height Sensor LED Ch 5'), ...
                mic.Task.fromUiGetSetNumber(ui.ui6, 0, 0.01, 'mA', 'Height Sensor LED Ch 6') ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Height Sensor LEDs Off' ...
            );
        end
        
        % @param {char 1xm} cName - app-wide unique name
        % @param {bl12014.ui.ReticleCoarseStage 1x1}
        % @param {bl12014.ui.WaferCoarseStage 1x1}
        % @param {bl12014.ui.WaferCoarseStage 1x1}
        % @param {mic.Clock 1x1}
        function task = createStateRetAtClearFieldAndWafAtDiodeAndHeightSensorLEDsOff(...
                cName, ...
                uiReticle, ...
                uiWafer, ...
                uiLEDs, ...
                clock)
                
            if ~isa(clock, 'mic.Clock')
                error('clock must be mic.Clock');
            end
            
            ceTasks = {...
                bl12014.Tasks.createStateReticleStageAtClearField(...
                    [cName, 'reticle-stage-at-clear-field'], ...
                    uiReticle, ...
                    clock ...
                ) ...
                bl12014.Tasks.createStateWaferStageAtDiode(...
                    [cName, 'wafer-stage-at-diode'], ...
                    uiWafer, ...
                    clock ...
                ) ...
                bl12014.Tasks.createStateHeightSensorLEDsOff(...
                    [cName, 'height-sensor-leds-off'], ...
                    uiLEDs, ...
                    clock ...
                ) ...
            };
            
            task = mic.TaskSequence(...
                'cName', cName, ...
                'clock', clock, ...
                'ceTasks', ceTasks, ...
                'dPeriod', 0.5, ...
                'cDescription', 'Reticle at Clear Field + Wafer at Diode + HS LEDs Off' ...
            );
        end
        
        
        
        
        
        
        
    end 
    
    
end